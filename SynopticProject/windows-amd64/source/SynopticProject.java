/* autogenerated by Processing revision 1293 on 2024-05-02 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class SynopticProject extends PApplet {

private String currentScreen; 
private StartMenu sm;
private LevelSelect ls;
private ArrayList<Level> levels;
private Level currentLevel;
private final char[] validInput = {'1','2','3','4','5','6','7','8','9'};

public void setup(){
  /* size commented out by preprocessor */;
    
  loadLevels();
    
  currentScreen = "SM";
  sm = new StartMenu();
  ls = new LevelSelect();
}

// Needed for mousePressed
public void draw(){

}

public void mousePressed(){
  // Checks for clicks depending on current screen
  if(currentScreen == "SM"){
    sm.buttonClicked();
  }
  else if(currentScreen == "LS"){
    ls.buttonClicked();  
  } else if(currentScreen == "LVL"){
    currentLevel.buttonClicked();
  }
}

public void keyPressed(){
  // array of accetable inputs
  // if array.contains(input) && currentLevel.awaitingInput == true then updateLevelIfInput
  for(char valid : validInput){
    if(valid == key){
      if(currentLevel.getAwaitingIfCondition() == true){
        currentLevel.generateIfBlock(PApplet.parseInt(key) - PApplet.parseInt('0'));
      } else if(currentLevel.getAwaitingLoopLength() == true){
        currentLevel.generateLoopBlock(PApplet.parseInt(key) - PApplet.parseInt('0')); 
      }
    }
  }
}

public void loadLevels(){
  // Handles Level Loading on Loadup
  JSONObject levelsObj = loadJSONObject("levels.json");
  JSONArray levelsArray = levelsObj.getJSONArray("levels");
  levels = new ArrayList<Level>();
  
  // Loops through the array to find all levels
  for(int i = 0; i < levelsArray.size(); i++){
    // Stores the current level as an object
    JSONObject level = levelsArray.getJSONObject(i);
    // Stores the current level values
    String levelInfo = level.getString("levelInfo");
    
    JSONArray levelInput = level.getJSONArray("levelInput");
    IntList levelInputList = new IntList();
    
    for(int j = 0; j < levelInput.size(); j++){
      levelInputList.append(levelInput.getInt(j));
    }
    
    JSONArray levelOutput = level.getJSONArray("levelExpectedOutput");
    IntList levelOutputList = new IntList();
    
    for(int j = 0; j < levelOutput.size(); j++){
      levelOutputList.append(levelOutput.getInt(j)); 
    }
    
    String levelLockedString = level.getString("levelLocked");
    boolean levelLocked;
    
    if(levelLockedString.toLowerCase().equals("false")){
      levelLocked = false;
    } else{
      levelLocked = true;
    }
    
    JSONArray levelCodeBlocks = level.getJSONArray("availableCodeBlocks");
    StringList levelCodeBlocksList = new StringList();
    
    for(int j = 0; j < levelCodeBlocks.size(); j++){
      levelCodeBlocksList.append(levelCodeBlocks.getString(j)); 
    }
    
    int levelMinIfs = level.getInt("minimumIfsUsed");
    int levelMinLoops = level.getInt("minimumLoopsUsed");
    
    
    levels.add(new Level(levelInfo, i + 1,levelInputList, levelOutputList, levelCodeBlocksList, levelMinIfs, levelMinLoops, levelLocked));
  }
}

public void setCurrentScreen(String newValue){
  currentScreen = newValue;
}

public void setCurrentLevel(String newValue){
  for(int i = 0; i < levels.size(); i++){
    if(levels.get(i).levelNumber == PApplet.parseInt(newValue)){
      currentLevel = levels.get(i);
    }
  }
}

public StartMenu getSM(){
  return this.sm; 
}

public LevelSelect getLS(){
  return this.ls; 
}

public ArrayList<Level> getLevels(){
  return this.levels;
}

public Level getCurrentLevel(){
  return this.currentLevel; 
}
abstract class Button{
  
  private float bX;
  private float bY;
  
  private float bWidth;
  private float bHeight;
  
  private String bText;
  private int bTextFS;
  private int bColour;
  private int bFontColour;
  
  private PImage bImage;
  
  private boolean bActive;
  
  Button(float x, float y, float w, float h, String text, int fontSize, int c, boolean active, String img){
     bX = x;
     bY = y;
     bWidth = w;
     bHeight = h;
     bText = text;
     bTextFS = fontSize;
     bColour = c;
     bFontColour = color(255);
     bActive = active;
     
     if(img != ""){
        bImage = loadImage(img);
     }     
  }
  
  public void showButton(){
    if(bActive == false){
      imageMode(CENTER);
      image(loadImage("Assets/Buttons/Button16.png"),bX,bY,bWidth,bHeight);
    }  else if(bImage != null){
      imageMode(CENTER);
      image(bImage,bX,bY,bWidth,bHeight);         
    }  else{
      strokeWeight(1);
      fill(bColour);
      rectMode(CENTER);
      rect(bX, bY, bWidth, bHeight);  
    }
      
    fill(bFontColour);
    textSize(bTextFS);
    textAlign(CENTER, CENTER);
    text(bText, bX, bY);
  }
  
  public boolean isClicked(){
    return (mouseX > (bX - (bWidth/2)) && mouseX < (bX + (bWidth/2)) && mouseY > (bY - (bHeight/2)) && mouseY < (bY + (bHeight/2)));
  }
  
  public abstract void onClick();
  
  public String getBText(){
   return this.bText; 
  }
  
  public void setBText(String newValue){
    this.bText = newValue; 
  }
  
  public boolean getBActive(){
    return this.bActive;
  }
  
  public void setBActive(boolean newValue){
    this.bActive = newValue;
  }
  
  public void setColour(int newValue){
    this.bColour = newValue; 
  }
  
  public void setFontColour(int newValue){
    this.bFontColour = newValue; 
  }
}
class CodeBlock{
  
  private float cbX;
  private float cbY;
  
  private float cbWidth;
  private float cbHeight;
  
  private String cbText;
  private int cbTextFS;
  private int cbColour;
  
  private ArrayList<CodeBlock> codeBlocks;
  
  private int ifCondition;
  private int loopLength;
  
  private PImage cbImage;
 
  CodeBlock(float x, float y, float w, float h, String text, int fontSize, int c, int ifC, int lL, String img){
     cbX = x;
     cbY = y;
     cbWidth = w;
     cbHeight = h;
     cbText = text;
     cbTextFS = fontSize;
     cbColour = c;
     
     ifCondition = ifC;
     loopLength = lL;
     
     codeBlocks = new ArrayList<CodeBlock>();
     
     if(img != ""){
        cbImage = loadImage(img);
     }  
  }
  
  public void showCodeBlock(){
    if(cbImage != null){
      imageMode(CENTER);
      image(cbImage,cbX,cbY,cbWidth,cbHeight);    
    } else{
      strokeWeight(1);
      fill(cbColour);
      rectMode(CENTER);
      rect(cbX, cbY, cbWidth, cbHeight);
    }
    
    fill(255);
    textSize(cbTextFS);
    textAlign(CENTER, CENTER);
    text(cbText, cbX, cbY);
  }
  
  public String getCBText(){
   return this.cbText; 
  }
  
  public void setCBText(String newValue){
    this.cbText = newValue; 
  }
  
  public void addToCodeBlocks(CodeBlock cb){
    codeBlocks.add(cb); 
  }
  
  public ArrayList<CodeBlock> getCodeBlocks(){
    return codeBlocks; 
  }
  
  public int getIfCondition(){
    return this.ifCondition;
  }
  
  public int getLoopLength(){
    return this.loopLength; 
  }
}
class Level{
 
  final int maxConditionals = 8;
  final int maxBlocks = 24;
  
  private String levelInfo;
  private int levelNumber;
  
  // Stores initial input used for resetting
  private IntList levelInitialInput;
  private IntList levelInput;
  private IntList levelOutput;  
  
  private boolean levelLocked;
  
  private StringList levelCodeBlockButtons;
  private int levelMinimumIfs;
  private int ifsUsed;
  private int levelMinimumLoops;
  private int loopsUsed;
  
  private ArrayList<LevelButton> levelGeneralButtons;
  private ArrayList<LevelButton> codeBlockButtons;
  private ArrayList<CodeBlock> codeBlocks;
  private ArrayList<CodeBlock> openConditionals;
  
  private int levelAttemptCounter;
  private IntList finalLevelOutput;
  
  private int storedValue;
  private int blocksAdded;
  
  private boolean awaitingIfCondition;
  private boolean awaitingLoopLength;
  
  // Used for function run function
  private boolean hasFailed = false;
  private boolean hasSucceeded = false;
  private String failMessage = "You have failed!\n";
  
  Level(String lInfo, int lNum, IntList lInput, IntList lOutput, StringList lCodeBlocks, int lMinIfs, int lMinLoops, boolean lLocked){
    levelInfo = lInfo;
    levelNumber = lNum;
    levelInitialInput = new IntList();
    levelInput = lInput;
    for(int i = 0; i < levelInput.size(); i++){
      levelInitialInput.append(levelInput.get(i)); 
    }
    levelLocked = lLocked;
    levelOutput = lOutput;
    levelCodeBlockButtons = lCodeBlocks;
    levelMinimumIfs = lMinIfs;
    levelMinimumLoops = lMinLoops;
    levelAttemptCounter = 0;  
    storedValue = 404;
    
    levelGeneralButtons = new ArrayList<LevelButton>();
    levelGeneralButtons.add(new LevelButton(100,950,150,50,"Back To Level Select",16,color(32,32,32), true, "Assets/Buttons/Button05.png"));
    levelGeneralButtons.add(new LevelButton(1100,950,150,50,"Run Function",16,color(32,32,32), true, "Assets/Buttons/Button05.png"));
    levelGeneralButtons.add(new LevelButton(925,950,150,50, "Reset",16,color(32,32,32),true, "Assets/Buttons/Button05.png"));
    
    codeBlockButtons = new ArrayList<LevelButton>();
    codeBlockButtons.add(new LevelButton(60,280,100,50,"Input",16,color(32,32,32),true, "Assets/Buttons/Button06.png"));
    codeBlockButtons.add(new LevelButton(180,280,100,50,"Output",16,color(32,32,32),true, "Assets/Buttons/Button02.png"));
    
    String codeBlockColour = "";
    
    for(int i = 0; i < levelCodeBlockButtons.size(); i++){
      if(levelCodeBlockButtons.get(i).equals("If")){
        codeBlockColour = "Assets/Buttons/Button08.png";
      } else if (levelCodeBlockButtons.get(i).equals("Loop")){
        codeBlockColour = "Assets/Buttons/Button11.png";
      }
      codeBlockButtons.add(new LevelButton(180+((codeBlockButtons.size() - 1)*120),280,100,50,levelCodeBlockButtons.get(i),16,color(32,32,32),true, codeBlockColour));
    }
    
    codeBlockButtons.add(new LevelButton(1140,400,100,50,"End current \nIf/Loop",16,color(32,32,32),false, "Assets/Buttons/Button05.png"));
    
    codeBlocks = new ArrayList<CodeBlock>();
    openConditionals = new ArrayList<CodeBlock>();
        
    finalLevelOutput = new IntList();
    
    awaitingIfCondition = false;
    awaitingLoopLength = false;
  }
  
  private void loadLevel(){
    background(0xFFD4ECF2);
    strokeWeight(2);
    
    rectMode(CENTER);
    fill(color(0xFF951818));
    rect(600,120,1200,240);
    
    fill(color(255));
    textSize(20);
    textAlign(LEFT,TOP);
    text(levelInfo,20,20);
    
    fill(color(0xFFD4ECF2));
    rect(600,280,1200,80);
    
    fill(color(0xFFD4ECF2));
    rect(1350,500,300,1000);

    fill(color(0xFF951818));
    strokeWeight(3);
    rect(600,440,800,80);
    
    textAlign(CENTER,CENTER);
    // Loops input array and turns it into a string
    fill(color(255));
    String inputArrayStr = "Problem Input: ";
    for(int i = 0; i < levelInitialInput.size(); i++){
      inputArrayStr += levelInitialInput.get(i);
      
      if(i + 1 != levelInitialInput.size()){
        inputArrayStr += ", "; 
      }
    }    
    text(inputArrayStr,600,440);
    
    fill(color(0xFF951818));
    rect(600,540,800,80);
    
    // Loops output array and turns it into a string
    fill(color(255));
    strokeWeight(3);
    String outputArrayStr = "Expected Output: ";
    for(int i = 0; i < levelOutput.size(); i++){
      outputArrayStr += levelOutput.get(i);
      
      if(i + 1 != levelOutput.size()){
        outputArrayStr += ", ";
      }
    }
    text(outputArrayStr,600,540);
    
    //fill(color(134,197,218));
    //rect(600,540,800,80);
    
    //String finalOutputArrayStr = "Final Output: ";
    //for(int i = 0; i < finalLevelOutput.size(); i++){
    //  finalOutputArrayStr += finalLevelOutput.get(i);
      
    //  if(i + 1 != finalLevelOutput.size()){
    //    finalOutputArrayStr += ", "; 
    //  }
    //}
    
    //fill(color(0,0,0));
    //text(finalOutputArrayStr,600,540);
      
    fill(color(0));
    textSize(24);
    text("Attempts: " + levelAttemptCounter,1130,340);
    
    if(levelMinimumIfs > 0 || levelMinimumLoops > 0){
      fill(color(0xFF951818));
      strokeWeight(3);
      rect(600,740,800,80);
    }
     
    fill(color(255));
    if(levelMinimumIfs > 0){
      text("Minimum If Blocks Required: " + levelMinimumIfs,600,720); 
    }
    
    if(levelMinimumLoops > 0){
      text("Minimum Loop Blocks Required: " + levelMinimumLoops,600,760); 
    }
       
    if(blocksAdded >= maxBlocks){
      disableCodeBlockButtons();
    } else if(openConditionals.size() >= maxConditionals){
      disableConditionalCodeBlockButtons();
    } else if (hasSucceeded == false && hasFailed == false){
      enableButtons();
    }
    
    generateLevelButtons();
    generateCodeBlockButtons();
    generateCodeBlocks(codeBlocks); 
  }
  
  private void buttonClicked(){
    for(int i = 0; i < levelGeneralButtons.size(); i++){
      if(levelGeneralButtons.get(i).isClicked() && levelGeneralButtons.get(i).getBActive() == true){
        levelGeneralButtons.get(i).onClick();  
      }
    }
    
    for(int i = 0; i < codeBlockButtons.size(); i++){
      if(codeBlockButtons.get(i).isClicked() && codeBlockButtons.get(i).getBActive() == true){
        codeBlockButtons.get(i).onClick(); 
      }
    }
  }
  
  private void generateLevelButtons(){
    for(int i = 0; i < levelGeneralButtons.size(); i++){
      levelGeneralButtons.get(i).showButton();
    }
  }
  
  private void generateCodeBlockButtons(){
    for(int i = 0; i < codeBlockButtons.size(); i++){
      if(codeBlockButtons.get(i).getBText() == "End current \nIf/Loop"){
        if(openConditionals.size() > 0){
          codeBlockButtons.get(i).setBActive(true);
          codeBlockButtons.get(i).showButton();
        } else{
          codeBlockButtons.get(i).setBActive(false); 
        }
      } else{
        codeBlockButtons.get(i).showButton(); 
      }
    }
  }
  
  public int getLevelNumber(){
    return this.levelNumber; 
  }
  
  public void incrementAttemptCounter(){
    this.levelAttemptCounter++;
  }
  
  public void resetAttemptCounter(){
    this.levelAttemptCounter = 0; 
  }
  
  public void resetStoredValue(){
    this.storedValue = 404; 
  }
  
  public void resetFailConditions(){
    this.hasFailed = false;
    this.failMessage = "You have failed!\n";
    this.loopsUsed = 0;
    this.ifsUsed = 0;
  }
  
  public void resetSuccessConditions(){
    this.hasSucceeded = false; 
  }
  
  public void clearCodeBlocks(){
    this.codeBlocks.clear();
    this.blocksAdded = 0;
  }
  
  public void resetInput(){   
    this.levelInput.clear();
    
    for(int i = 0; i < levelInitialInput.size(); i++){
      levelInput.append(levelInitialInput.get(i));    
    }
  }
  
  public void resetFinalOutput(){
    this.finalLevelOutput.clear(); 
  }
  
  public void resetConditions(){
    this.awaitingIfCondition = false;
    this.awaitingLoopLength = false;
    this.openConditionals.clear();
  }
  
  public void setStoredValue(int newValue){
    this.storedValue = newValue; 
  }
  
  public int getStoredValue(){
    return this.storedValue; 
  }
  
  public IntList getInput(){
    return this.levelInput;  
  }
  
  private void fail(){
     disableButtons();
    
    for(int i = 0; i < levelGeneralButtons.size(); i++){
      if(levelGeneralButtons.get(i).getBText() == "Reset" || levelGeneralButtons.get(i).getBText() == "Back To Level Select"){
         levelGeneralButtons.get(i).setBActive(true);
      }
    }
    
    loadLevel();
    
    fill(color(0xFF951818));
    rect(600,600,800,500);
    
    fill(color(0xFF951818));
    rect(600,420,600,70);
    rect(600,500,600,70);
    
    fill(color(255));
    textSize(24);
    String outputArrayStr = "Expected Output: ";
    for(int i = 0; i < levelOutput.size(); i++){
      outputArrayStr += levelOutput.get(i);
      
      if(i + 1 != levelOutput.size()){
        outputArrayStr += ", ";
      }
    }
    text(outputArrayStr,600,420);
    
    String finalOutputArrayStr = "Your Output: ";
    for(int i = 0; i < finalLevelOutput.size(); i++){
       finalOutputArrayStr += finalLevelOutput.get(i);
       
       if(i + 1 != finalLevelOutput.size()){
         finalOutputArrayStr += ", "; 
       }
    }
    text(finalOutputArrayStr,600,500);
    
    textSize(24);
    textAlign(CENTER,TOP);
    text(failMessage,600,570);
  }
  
  private void success(){
    hasSucceeded = true;
    
    disableButtons();
                 
    for(int i = 0; i < levelGeneralButtons.size(); i++){
      if(levelGeneralButtons.get(i).getBText() == "Back To Level Select"){
         levelGeneralButtons.get(i).setBActive(true);
      }
    }
    
    loadLevel();
    
    fill(color(0xFF951818));
    rectMode(CENTER);
    strokeWeight(3);
    rect(600,600,800,500);
    
    fill(color(255));
    textAlign(CENTER,CENTER);
    textSize(32);
    text("Level Complete!",600,420);
    
    fill(color(0xFF951818));
    rect(600,510,600,70);
    rect(600,590,600,70);
    
    fill(color(255));
    textSize(24);
    String outputArrayStr = "Expected Output: ";
    for(int i = 0; i < levelOutput.size(); i++){
      outputArrayStr += levelOutput.get(i);
      
      if(i + 1 != levelOutput.size()){
        outputArrayStr += ", ";
      }
    }
    text(outputArrayStr,600,510);
    
    String finalOutputArrayStr = "Your Output: ";
    for(int i = 0; i < finalLevelOutput.size(); i++){
       finalOutputArrayStr += finalLevelOutput.get(i);
       
       if(i + 1 != finalLevelOutput.size()){
         finalOutputArrayStr += ", "; 
       }
    }
    text(finalOutputArrayStr,600,590);
    
    textSize(24);
    text("Attempts Taken: " + (PApplet.parseInt(levelAttemptCounter) + 1),600,670);
    text("Return to Level Select to try other levels or to try this level again!",600,700);
    
    ls.unlockNextLevel();
  }
  
  private ArrayList<CodeBlock> getLevelCBs(){
    return this.codeBlocks; 
  }
  
  public void closeCurrentConditional(){
    openConditionals.remove(openConditionals.size() - 1);  
  }
  
  public void addCodeBlock(String blockType){
    if(blockType.toLowerCase().equals("input") || blockType.toLowerCase().equals("output")){
      String cbImage = "";
      if(blockType.toLowerCase().equals("input")){
        cbImage = "Assets/Buttons/Button06.png";
      } else if (blockType.toLowerCase().equals("output")){
        cbImage = "Assets/Buttons/Button02.png";
      }
      CodeBlock cb = new CodeBlock(1280 + (openConditionals.size() * 15),30+(blocksAdded*40),150,35,blockType,16,color(32,32,32),0,0, cbImage);
      if(openConditionals.size() > 0){
        openConditionals.get(openConditionals.size() - 1).addToCodeBlocks(cb);
      } else{
        codeBlocks.add(cb);     
      }    
      blocksAdded++;      
      loadLevel();
    } else if(blockType.toLowerCase().equals("if")){
      awaitingIfCondition = true;
      drawAwaitingInput("if");
    } else if(blockType.toLowerCase().equals("loop")){
      awaitingLoopLength = true;
      drawAwaitingInput("loop");
    }
  }
  
  private void drawAwaitingInput(String condition){
    disableButtons();
    
    for(int i = 0; i < levelGeneralButtons.size(); i++){
      if(levelGeneralButtons.get(i).getBText() == "Reset" || levelGeneralButtons.get(i).getBText() == "Back To Level Select"){
         levelGeneralButtons.get(i).setBActive(true);
      }
    }
    
    fill(color(0xFF1D5F33));
    strokeWeight(3);
    rect(600,500,600,100);
    
    textAlign(CENTER, CENTER);
    textSize(22);
    fill(255);
    
    if(condition == "if"){
      text("Press a number key (1-9) to set the condition for your If block",600,500);
    } else if(condition == "loop"){
      text("Press a number key (1-9) to select the amount of times you would like to Loop",600,500);
    }
  }
  
  public boolean getAwaitingIfCondition(){
    return this.awaitingIfCondition;
  }
  
  public boolean getAwaitingLoopLength(){
    return this.awaitingLoopLength; 
  }
  
  public boolean getLevelLocked(){
    return this.levelLocked; 
  }
  
  public void setLevelLocked(boolean nV){
    this.levelLocked = nV; 
  }
  
  public void generateIfBlock(int ifC){
    CodeBlock cb = new CodeBlock(1280 + (openConditionals.size() * 15), 30+(blocksAdded*40),150,35,"If Stored Value = " + ifC,16,color(32,32,32),ifC,0, "Assets/Buttons/Button08.png");
    if(openConditionals.size() > 0){
      openConditionals.get(openConditionals.size() - 1).addToCodeBlocks(cb);
      openConditionals.add(cb);
    } else{
      codeBlocks.add(cb);
      openConditionals.add(cb);
    }
    
    this.awaitingIfCondition = false;
    ifsUsed++;
    enableButtons();
    blocksAdded++;
    loadLevel();
  }
  
  public void generateLoopBlock(int lL){
    CodeBlock cb = new CodeBlock(1280 + (openConditionals.size() * 15), 30+(blocksAdded*40),150,35,"Loop " + lL + " Times",16,color(32,32,32),0,lL, "Assets/Buttons/Button11.png");
    if(openConditionals.size() > 0){
      openConditionals.get(openConditionals.size() - 1).addToCodeBlocks(cb);
      openConditionals.add(cb);
    } else{
      codeBlocks.add(cb);
      openConditionals.add(cb);
    }
    
    this.awaitingLoopLength = false;
    loopsUsed++;
    enableButtons();
    blocksAdded++;
    loadLevel();
  }
  
  public void disableButtons(){
    for(int i = 0; i < levelGeneralButtons.size(); i++){
      levelGeneralButtons.get(i).setBActive(false);
    }
    
    disableCodeBlockButtons();
  }
  
  public void enableButtons(){
    for(int i = 0; i < levelGeneralButtons.size(); i++){
      levelGeneralButtons.get(i).setBActive(true);
    }
    
    for(int i = 0; i < codeBlockButtons.size(); i++){
      codeBlockButtons.get(i).setBActive(true);
    }
  }
  
  public void disableCodeBlockButtons(){
    // Used for handling block limits
    for(int i = 0; i < codeBlockButtons.size(); i++){
      codeBlockButtons.get(i).setBActive(false); 
    }
  }
  
  public void disableConditionalCodeBlockButtons(){
    // Used for handling nested block limits
    for(int i = 0; i < codeBlockButtons.size(); i++){
      if(codeBlockButtons.get(i).getBText().toLowerCase().equals("if") || codeBlockButtons.get(i).getBText().toLowerCase().equals("loop")){
        codeBlockButtons.get(i).setBActive(false);
      }
    }
  }
  
  private void generateCodeBlocks(ArrayList<CodeBlock> cbArray){
    
    for(int i = 0; i < cbArray.size(); i++){
      cbArray.get(i).showCodeBlock(); 
      if(cbArray.get(i).getCBText().toLowerCase().contains("if") || cbArray.get(i).getCBText().toLowerCase().contains("loop")){
        cbArray.get(i).showCodeBlock();
        generateCodeBlocks(cbArray.get(i).getCodeBlocks());
      } 
    }
  }
    
  public void runFunction(ArrayList<CodeBlock> cbArray, Boolean initialArray){
    
    for(int i = 0; i < cbArray.size(); i++){
      if(cbArray.get(i).getCBText().toLowerCase().equals("input")){
        if(levelInput.size() == 0){
          if(!failMessage.contains("You can not input from an empty array")){
            failMessage += "You can not input from an empty array!\n";
          }
          hasFailed = true;
        } else{
           storedValue = levelInput.get(0);
           levelInput.remove(0);
        }
      } else if (cbArray.get(i).getCBText().toLowerCase().equals("output")){
        if(storedValue == 404){
          if(!failMessage.contains("You do not have a value stored to output")){
            failMessage += "You do not have a value stored to output!\n";
          }        
          hasFailed = true;
        } else {
          finalLevelOutput.append(storedValue);
          storedValue = 404;
        }
      } else if (cbArray.get(i).getCBText().toLowerCase().contains("if")){
        if(storedValue == 404){
          if(!failMessage.contains("You do not have a stored value to compare to"));{
            failMessage += "You do not have a stored value to compare to for your if block!\n";
          }
          hasFailed = true;
        } else if(storedValue == cbArray.get(i).getIfCondition()){
          runFunction(cbArray.get(i).getCodeBlocks(), false);
        }
      } else if (cbArray.get(i).getCBText().toLowerCase().contains("loop")){
        for(int loopL = 0; loopL < cbArray.get(i).getLoopLength(); loopL++){
          runFunction(cbArray.get(i).getCodeBlocks(), false);
        }
      }
    }
    
    
    
    if(initialArray == true){
      if(levelOutput.size() == finalLevelOutput.size()){
        boolean arraysEqual = true;
        for(int i = 0; i < levelOutput.size(); i++){
          if(levelOutput.get(i) != finalLevelOutput.get(i)){
            arraysEqual = false; 
          }
        }
        
        if(arraysEqual == false){
          if(!failMessage.contains("Your output does not match the expected output"));{
            failMessage += "Your output does not match the expected output!\n"; 
          }
          hasFailed = true;
        } 
      } else{
        if(!failMessage.contains("Your output does not match the expected output"));{
            failMessage += "Your output does not match the expected output!\n";
          } 
        hasFailed = true;
      }
      
       if(ifsUsed < levelMinimumIfs){
         if(!failMessage.contains("You have used less If blocks than required"));{
            failMessage += "You have used less If blocks than required!\n";
          }
       hasFailed = true;
      }
    
      if (loopsUsed < levelMinimumLoops){
        if(!failMessage.contains("You have used less Loop blocks than required"));{
            failMessage += "You have used less Loop blocks than required!\n";
          }
        hasFailed = true;
      }
      
      if(hasFailed){
        failMessage += "\nPlease reset the level to try again!";
        fail(); 
      } else{
        success();
      }
    }    
  }
}
class LevelButton extends Button{
 
  LevelButton(float x, float y, float w, float h, String text, int fontSize, int c, boolean active, String img){
    super(x, y, w, h, text, fontSize, c, active, img);
  }
  
  @Override public 
  void onClick(){
    if(this.getBText() == "Back To Level Select"){
      setCurrentScreen("LS");
      getCurrentLevel().clearCodeBlocks();
      getCurrentLevel().resetInput();
      getCurrentLevel().resetFinalOutput();
      getLS().display();
    } else if(this.getBText() == "Reset"){
      getCurrentLevel().incrementAttemptCounter();
      getCurrentLevel().clearCodeBlocks();
      getCurrentLevel().resetInput();
      getCurrentLevel().resetFinalOutput();
      getCurrentLevel().resetConditions();
      getCurrentLevel().resetFailConditions();
      getCurrentLevel().resetStoredValue();
      getCurrentLevel().enableButtons();
      getCurrentLevel().loadLevel(); 
    } else if(this.getBText() == "Run Function"){
      getCurrentLevel().runFunction(getCurrentLevel().getLevelCBs(), true); 
    } else if(this.getBText() == "End current \nIf/Loop"){
      getCurrentLevel().closeCurrentConditional();
      getCurrentLevel().loadLevel();
    }
    else{
      getCurrentLevel().addCodeBlock(this.getBText()); 
    }
  }
}
class LevelSelect{
  private int pageStartIndex = 0;
  private ArrayList<Level> levels;
  private ArrayList<LevelSelectButton> lsButtons;
  private ArrayList<LevelSelectButton> lsLevelButtons;
  
  LevelSelect(){
    levels = getLevels();
    
    lsButtons = new ArrayList<LevelSelectButton>();
    lsButtons.add(new LevelSelectButton(150,950,150,50,"Back To Start Menu",16,color(32,32,32), true, "Assets/Buttons/Button05.png"));
    lsButtons.add(new LevelSelectButton(350,750,160,60,"Previous Page",24,color(32,32,32), false, "Assets/Buttons/Button05.png"));
    lsButtons.add(new LevelSelectButton(1150,750,160,60,"Next Page",24,color(32,32,32), false, "Assets/Buttons/Button05.png"));
    
    lsLevelButtons = new ArrayList<LevelSelectButton>();
    generateLevelButtons();
  }
  
  private void display(){
    resetLevelButtons();
    
    background(0xFFD4ECF2);
    
    strokeWeight(3);
    fill(color(0xFF951818));
    rectMode(CENTER);
    rect(750,500,1000,600,50);
    
    for(int i = 0; i < lsButtons.size(); i++){
       if(lsButtons.get(i).getBText() == "Previous Page"){
         if(pageStartIndex > 0){       
           lsButtons.get(i).setBActive(true);
           lsButtons.get(i).showButton();
         } else{
           lsButtons.get(i).setBActive(false); 
         }
       } 
       else if(lsButtons.get(i).getBText() == "Next Page"){
         if(pageStartIndex + 4 < levels.size()){         
           lsButtons.get(i).setBActive(true);
           lsButtons.get(i).showButton();
         } else{
           lsButtons.get(i).setBActive(false); 
         }
       }
       else{
         lsButtons.get(i).showButton();       
       }
    }
    
    for(int i = 0; i < 4 && i < (lsLevelButtons.size() - pageStartIndex); i++){         
      ArrayList<Level> levels = getLevels();
      for(int j = 0; j < levels.size(); j++){
        if(PApplet.parseInt(lsLevelButtons.get(i+pageStartIndex).getBText()) == levels.get(j).getLevelNumber()){
          if(levels.get(j).getLevelLocked() == false){
            lsLevelButtons.get(i+pageStartIndex).setBActive(true);
          }
        }
      }  
      lsLevelButtons.get(i+pageStartIndex).showButton();
    }
  }
  
  private void buttonClicked(){
    for(int i = 0; i < lsButtons.size(); i++){
      if(lsButtons.get(i).isClicked() && lsButtons.get(i).getBActive() == true){
        lsButtons.get(i).onClick(); 
      } 
    }
    
    for(int i = 0; i < lsLevelButtons.size(); i++){
      if(lsLevelButtons.get(i).isClicked() && lsLevelButtons.get(i).getBActive() == true){
        lsLevelButtons.get(i).onClick(); 
        resetLevelButtons();
      }
    }
  }
    
  private void generateLevelButtons(){
    // Add level buttons based on where they should be on the page
    int inactive = color(255,100,100);
    int active = color(100,255,100);
    
    int buttonC;
    String buttonImg;
    
    for(int i = 0; i < levels.size(); i++){
      if(levels.get(i).getLevelLocked() == true){
        buttonC = inactive; 
        buttonImg = "Assets/Buttons/Button16.png";
      } else{
        buttonC = active;
        buttonImg = "Assets/Buttons/Button06.png";
      }
      
      if((i+1) % 4 == 1){
        lsLevelButtons.add(new LevelSelectButton(450,500,150,150,str(levels.get(i).getLevelNumber()),32,buttonC,false, buttonImg));
      }
      else if((i+1) % 4 == 2){
        lsLevelButtons.add(new LevelSelectButton(650,500,150,150,str(levels.get(i).getLevelNumber()),32,buttonC,false, buttonImg));
      }
      else if((i+1) % 4 == 3){
        lsLevelButtons.add(new LevelSelectButton(850,500,150,150,str(levels.get(i).getLevelNumber()),32,buttonC,false, buttonImg));
      }
      else{
        lsLevelButtons.add(new LevelSelectButton(1050,500,150,150,str(levels.get(i).getLevelNumber()),32,buttonC,false, buttonImg));
      }
    }
    
    // Sets the font colour for the buttons - done this way rather than through constructor due to small use case
    for(int i = 0; i < lsLevelButtons.size(); i++){
      lsLevelButtons.get(i).setFontColour(color(255));    
    }
  }
   
  // Resets all level buttons to inactive
  private void resetLevelButtons(){
    for(int i = 0; i < lsLevelButtons.size(); i++){
      lsLevelButtons.get(i).setBActive(false);
    }
  }
   
  public int getPageStartIndex(){
    return this.pageStartIndex; 
  }
  
  public void setPageStartIndex(int newValue){
    this.pageStartIndex = newValue; 
  }
  
  public void unlockNextLevel(){
    if(getCurrentLevel().getLevelNumber() == levels.size()){
      println("Final Level");
    } else{
      levels.get(getCurrentLevel().getLevelNumber()).setLevelLocked(false);
    }
    
    lsLevelButtons.clear();
    generateLevelButtons();
  }
}
class LevelSelectButton extends Button{
  
  LevelSelectButton(float x, float y, float w, float h, String text, int fontSize, int c, boolean active, String img){
    super(x, y, w, h, text, fontSize, c, active, img);
  }
  
  @Override public 
    void onClick(){
      if(this.getBText() == "Next Page"){
        // Handles going to the next page of levels
        getLS().setPageStartIndex(ls.getPageStartIndex() + 4);
        getLS().display();
      } 
      else if (this.getBText() == "Previous Page"){
        // Handles going to the previous page of levels
        getLS().setPageStartIndex(ls.getPageStartIndex() - 4);
        getLS().display();
      } 
      else if(this.getBText() == "Back To Start Menu"){
        // Handles returning to the main menu 
        setCurrentScreen("SM");
        getSM().display();
      } 
      else{
        // Handles Level Buttons
        setCurrentScreen("LVL");
        setCurrentLevel(this.getBText());
        getCurrentLevel().resetAttemptCounter();
        getCurrentLevel().clearCodeBlocks();
        getCurrentLevel().resetInput();
        getCurrentLevel().resetFinalOutput();
        getCurrentLevel().resetConditions();
        getCurrentLevel().resetFailConditions();
        getCurrentLevel().resetSuccessConditions();
        getCurrentLevel().resetStoredValue();
        getCurrentLevel().enableButtons();
        getCurrentLevel().loadLevel();
      }
    }
}
class StartMenu{
  
  //Array of start menu buttons -> Display goes through list and displays
  ArrayList<StartMenuButton> smButtons;
  
  StartMenu(){
    smButtons = new ArrayList<StartMenuButton>();
    smButtons.add(new StartMenuButton(750,500,600,100,"Level Select",32,color(32,32,32), true, "Assets/Buttons/Button01.png"));  
           
    // Potential Level Create Button
    //smButtons.add(new StartMenuButton(700,600,600,100,"Level Create",32,color(32,32,32))); 
    display();
  }
  
  private void display(){
    background(0xFFD4ECF2);
    
    textAlign(CENTER,CENTER);
    textSize(96);
    fill(0);
    text("BLOCKLOGIC",750,250);
    textSize(36);
    text("An Educational Problem Solving Game - The Basics of Programming!",750,310);
    
    text("Instructions - READ BEFORE CONTINUING!",750,600);
    textSize(28);
    text("At the top of the level you will find important information, be sure to read it before attempting the level!\nEach level will have a problem in the form of a set of numbers and an expected answer\nUse the codeblocks provided on each level to get the required output\nSome levels will have additional requirements like Minimum If Blocks or Minimum Loop Blocks",750,700);
    
    for(int i = 0; i < smButtons.size(); i++){
      smButtons.get(i).showButton();  
    }   
  }
  
  private void buttonClicked(){
    for(int i = 0; i < smButtons.size(); i++){
      if(smButtons.get(i).isClicked() && smButtons.get(i).getBActive() == true){
        smButtons.get(i).onClick(); 
      } 
    }
  }
}
class StartMenuButton extends Button{
  
  StartMenuButton(float x, float y, float w, float h, String text, int fontSize, int c, boolean active, String img){
    super(x, y, w, h, text, fontSize, c, active, img);
  }
  
  @Override public 
    void onClick(){
      if(this.getBText() == "Level Select"){
        setCurrentScreen("LS");
        getLS().display();
      }
    }
}


  public void settings() { size(1500, 1000); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "SynopticProject" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
